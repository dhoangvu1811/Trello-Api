import { StatusCodes } from 'http-status-codes'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import ApiError from '~/utils/ApiError'

//Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: X√°c th·ª±c c√°i Jwt accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ FE c√≥ h·ª£p l·ªá hay kh√¥ng
const isAuthorized = async (req, res, next) => {
  // L·∫•y accessToken n·∫±m trong request cookies ph√≠a client - withCredentials trong file authorizeAxios
  const clientAccessToken = req.cookies?.accessToken

  // N·∫øu nh∆∞ clientAccessToken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói
  if (!clientAccessToken) {
    next(
      new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! (token not found)')
    )
    return
  }

  try {
    //B1: Th·ª±c hi·ªán gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá hay kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )
    // console.log('üöÄ ~ isAuthorized ~ accessTokenDecoded:', accessTokenDecoded)

    //B2: N·∫øu nh∆∞ token h·ª£p l·ªá th√¨ c·∫ßn l∆∞u th√¥ng tin gi·∫£i m√£ v√†o req.jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng x·ª≠ l√Ω ·ªü ph√≠a sau
    req.jwtDecoded = accessTokenDecoded

    //B3: cho ph√©p req ƒëi ti·∫øp
    next()
  } catch (error) {
    // console.log('üöÄ ~ isAuthorized ~ error:', error)
    //N·∫øu c√°i accessToken b·ªã h·∫øt h·∫°n (expired) th√¨ tr·∫£ v·ªÅ l·ªói GONE - 410 ƒë·ªÉ ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi Api refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token!'))
      return
    }

    //N·∫øu nh∆∞ accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k·ª≥ ƒëi·ªÅu g√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ tr·∫£ v·ªÅ l·ªói 401 cho ph√≠a FE g·ªçi Api sign_out
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))
  }
}

export const authMiddleware = {
  isAuthorized
}
